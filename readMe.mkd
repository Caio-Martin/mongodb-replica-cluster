# üê≥ Replica Set MongoDB com Docker Compose

Este projeto demonstra a configura√ß√£o de um Replica Set do MongoDB com 8 n√≥s usando Docker Compose, incluindo testes de toler√¢ncia a falhas e alta disponibilidade.

---

## üì¶ Estrutura do Projeto

- **8 containers MongoDB**
- **Replica Set configurado como `rs0`**
- Cada container mapeado com uma porta distinta no host
- Um dos membros configurado como **`voto desabilitado`** (sem direito a votar ou virar prim√°rio)

---

## üöÄ Como subir o ambiente

### Pr√©-requisitos

- Docker
- Docker Compose
- MongoDB Compass (opcional)

### Subir os containers

```bash
docker-compose up -d
```

> Isso criar√° os 8 containers com rede compartilhada `mongoCluster`.

---

## üîÅ Inicializando o Replica Set

1. Acesse o container `mongo1`:
```bash
docker exec -it mongo1 mongosh
```

2. Execute o seguinte comando para iniciar o Replica Set:

```js
rs.initiate({
  _id: "rs0",
  members: [
    { _id: 0, host: "mongo1:27017" },
    { _id: 1, host: "mongo2:27017" },
    { _id: 2, host: "mongo3:27017" },
    { _id: 3, host: "mongo4:27017" },
    { _id: 4, host: "mongo5:27017" },
    { _id: 5, host: "mongo6:27017" },
    { _id: 6, host: "mongo7:27017" },
    { _id: 7, host: "mongo8:27017", votes: 0, priority: 0 }
  ]
})
```

3. Verifique o status do cluster:

```js
rs.status()
```

4. Verifique quem √© o n√≥ prim√°rio atual:

```js
rs.isMaster()
```

---

## üß≤ Testes realizados

### ‚úÖ Teste 06 ‚Äî Queda de 1 ou 2 n√≥s secund√°rios

- Paramos 2 n√≥s com:
```bash
docker stop mongo3 mongo4
```

- Verificamos que o cluster continuou funcional com:

```js
rs.status()
```

- Inserimos dados normalmente no prim√°rio:
```js
use testdb
db.teste.insert({ nome: "Teste com secund√°rios fora" })
db.teste.find()
```

- Reiniciamos os n√≥s:
```bash
docker start mongo3 mongo4
```

- Verificamos novamente a reintegra√ß√£o com:

```js
rs.status()
```

---

### ‚úÖ Teste 07 ‚Äî Queda do n√≥ prim√°rio

- Identificamos o prim√°rio com:
```js
rs.isMaster()
```

- Paramos o container correspondente, por exemplo:
```bash
docker stop mongo1
```

- Aguardamos alguns segundos e conectamos a outro n√≥, como `mongo2`:

```bash
docker exec -it mongo2 mongosh
```

- Verificamos o novo prim√°rio:
```js
rs.status()
```

- Realizamos nova inser√ß√£o:
```js
use testdb
db.teste.insert({ nome: "Teste ap√≥s queda do prim√°rio" })
db.teste.find()
```

- Reiniciamos o prim√°rio antigo:
```bash
docker start mongo1
```

---

## üåê Acesso via MongoDB Compass

Voc√™ pode acessar qualquer n√≥ individualmente usando:

```
mongodb://localhost:27011
```

Ou conectar ao Replica Set completo com:

```
mongodb://localhost:27011,localhost:27012,localhost:27013/?replicaSet=rs0
```
## üö∞ Comandos √∫teis

| Descri√ß√£o                         | Comando                              |
|----------------------------------|--------------------------------------|
| Subir containers                 | `docker-compose up -d`              |
| Parar container espec√≠fico       | `docker stop mongoX`                |
| Iniciar container espec√≠fico     | `docker start mongoX`               |
| Acessar o Mongo via terminal     | `docker exec -it mongoX mongosh`    |
| Ver status do Replica Set        | `rs.status()`                       |
| Ver prim√°rio atual               | `rs.isMaster()`                     |
| Inserir dados                    | `db.teste.insert({ nome: "..." })`  |
| Consultar dados                  | `db.teste.find()`                   |

---

## üìÅ Arquivo docker-compose.yaml (resumo)

- Cada container usa a imagem `mongodb/mongodb-community-server:latest`
- Replica Set nomeado como `rs0`
- Porta local diferente para cada container (`27011` a `27018`)
- Container `mongo8` com `votes: 0` e `priority: 0`


